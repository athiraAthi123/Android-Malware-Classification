#dropping first column-sno
data=data.drop(data.columns[0], axis=1)
#finding number of Nan in df
nancount=data.isna().sum()
#finding max number of Nan values possible in a feature
print('Max Nan values:',nancount.max())
#To get number of rows that have Nan values
print('No. of rows with Nan',nancount.sum())
#Dealing with Nan values
data=data.dropna()
#data.fillna(value=data.mean(), inplace=True) 
data=data.drop_duplicates()
print('No of Nan after dropping:',data.isnull().sum().max())
print('Shape now:',data.shape)
#categorical features
obj=data.select_dtypes(include='object')
list(obj.columns)
#finding ranges for each feature
for col in d:
  mn=data[col].min()
  mx=data[col].max()
  print(col,':','(',mn,',',mx,')')
#Dropping features having range between 0 to 0
data=data.drop(['Bwd PSH Flags','Fwd URG Flags','Bwd URG Flags','Fwd Avg Bulk Rate','Bwd Avg Bytes/Bulk','Bwd Avg Packets/Bulk','Bwd Avg Bulk Rate','Fwd Avg Packets/Bulk','RST Flag Count','CWE Flag Count','ECE Flag Count'],axis=1)
data=data.drop(['Fwd Avg Bytes/Bulk'],axis=1)
data=data.drop(['Fwd Header Length.1'],axis=1)
#extracting numerical features alone
num=data.select_dtypes(exclude=['object','category'])
numerical_features=num.columns
#number of numerical features
numerical_features.shape
data.describe().T
